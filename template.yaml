---
apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: node-js-service
  title: Microservice (Nodejs)
  description: Deploy a containerised Nodejs Microservice following our golden path
  tags:
    - recommended
    - csharp
    - docker
  links:
    - url: https://pathfinder-demo.uksouth.cloudapp.azure.com/docs
      title: Microservices Golden path
      icon: dashboard
      type: process
    - url: https://pathfinder-demo.uksouth.cloudapp.azure.com/docs
      title: Documentation
      icon: help
      type: process
spec:
  owner: owner:developers
  type: service
  lifecycle: production
  system: data-systems

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: App Details
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name application
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: What will this app do? N.B. this populates the readme.md
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - pscode.lioncloud.net
            allowedOwners:
              - psinnersource/cloud/cap/cap-azure/pathfinder/demos/db-nonprod
              - psinnersource/cloud/cap/cap-azure/pathfinder/demos/db-prod
            allowedRepos:
              - infra-hub-and-spoke

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}

    # This step publishes the contents of the working directory to Pscode.
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./
        url: https://pscode.lioncloud.net/psinnersource/cloud/cap/cap-azure/pathfinder/templates/infra-hub-and-spoke/-/tree/main/content/docs

    # This step publishes the contents of the working directory to pscode.
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        defaultBranch: 'main'
        gitCommitMessage: 'Generated initial commit for: ${{parameters.name}}'
        repoVisibility: 'internal'
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        defaultBranch: 'main'
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
